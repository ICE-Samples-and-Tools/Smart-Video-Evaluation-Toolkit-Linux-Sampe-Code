From ce387d61ef6e866c5fd2592bfaae7e541130693b Mon Sep 17 00:00:00 2001
From: Elaine Wang <elaine.wang@intel.com>
Date: Wed, 15 Jan 2020 00:40:25 +0800
Subject: [PATCH] sample_common: Add support to multiple displays

1. Ignore the display specified in par file, so one par file
can work for different display types.
2. Add support to multiple displays
3. Add a WR for the setMaster failure when using multiple displays.

Signed-off-by: Elaine Wang <elaine.wang@intel.com>
---
 .../sample_common/include/vaapi_utils_drm.h   |  2 +-
 samples/sample_common/src/vaapi_utils_drm.cpp | 40 ++++++++++++++-----
 2 files changed, 31 insertions(+), 11 deletions(-)

diff --git a/samples/sample_common/include/vaapi_utils_drm.h b/samples/sample_common/include/vaapi_utils_drm.h
index 35839505..08d15a25 100644
--- a/samples/sample_common/include/vaapi_utils_drm.h
+++ b/samples/sample_common/include/vaapi_utils_drm.h
@@ -65,7 +65,7 @@ private:
     bool setupConnection(drmModeRes *resource, drmModeConnector* connector);
     bool getPlane();
 
-    bool setMaster();
+    bool setMaster(int wait_max = 30000);
     void dropMaster();
     bool restore();
 
diff --git a/samples/sample_common/src/vaapi_utils_drm.cpp b/samples/sample_common/src/vaapi_utils_drm.cpp
index 96632456..570ecdb7 100644
--- a/samples/sample_common/src/vaapi_utils_drm.cpp
+++ b/samples/sample_common/src/vaapi_utils_drm.cpp
@@ -25,6 +25,8 @@ or https://software.intel.com/en-us/media-client-solutions-support.
 #include <sys/ioctl.h>
 
 #include <stdexcept>
+#include <set>
+#include <mutex>
 
 #include "vaapi_utils_drm.h"
 #include <drm_fourcc.h>
@@ -237,32 +239,50 @@ drmRenderer::~drmRenderer()
     }
 }
 
+//Support up to 4 displays
+#define MFX_MAX_SUPPORTED_DSP
 bool drmRenderer::getConnector(drmModeRes *resource, uint32_t connector_type)
 {
     bool found = false;
+    static std::mutex connectorLock;
+    static std::set< uint32_t > connected_dsp_ids;
+    std::lock_guard<std::mutex> lock(connectorLock);
     drmModeConnectorPtr connector = NULL;
 
+    msdk_printf(MSDK_STRING("drmrender:connector number %d, required type %d\n"), resource->count_connectors, connector_type);
+
     for (int i = 0; i < resource->count_connectors; ++i) {
         connector = m_drmlib.drmModeGetConnector(m_fd, resource->connectors[i]);
         if (connector) {
-            if ((connector->connector_type == connector_type) ||
-                (connector_type == DRM_MODE_CONNECTOR_Unknown)) {
                 if (connector->connection == DRM_MODE_CONNECTED) {
-                    msdk_printf(MSDK_STRING("drmrender: trying connection: %s\n"), getConnectorName(connector->connector_type));
+                    if (connected_dsp_ids.count(connector->connector_id) > 0)
+                    {
+                        msdk_printf(MSDK_STRING("drmrender: connection: %s  with (connector_id %d) is being used . Try next one\n"), getConnectorName(connector->connector_type), connector->connector_id);
+                        m_drmlib.drmModeFreeConnector(connector);
+                        continue;
+                    }
+
+                    msdk_printf(MSDK_STRING("drmrender: trying connection: %s connector_id %d\n"), getConnectorName(connector->connector_type), connector->connector_id);
                     m_connector_type = connector->connector_type;
                     m_connectorID = connector->connector_id;
                     found = setupConnection(resource, connector);
-                    if (found) msdk_printf(MSDK_STRING("drmrender: succeeded...\n"));
-                    else msdk_printf(MSDK_STRING("drmrender: failed...\n"));
-                } else if ((connector_type != DRM_MODE_CONNECTOR_Unknown)) {
-                    msdk_printf(MSDK_STRING("drmrender: error: requested monitor not connected\n"));
+
+                    if (found)
+                    {
+                        msdk_printf(MSDK_STRING("drmrender: succeeded...\n"));
+                        connected_dsp_ids.insert(connector->connector_id);
+                        //WR for setmaster() failure when using multi-display
+                        setMaster(0);
+                        dropMaster();
+                    }
+                    else msdk_printf(MSDK_STRING("drmrender: failed..\n"));
                 }
             }
             m_drmlib.drmModeFreeConnector(connector);
             if (found) return true;
-        }
     }
     msdk_printf(MSDK_STRING("drmrender: error: requested monitor not available\n"));
+
     return false;
 }
 
@@ -358,14 +378,14 @@ bool drmRenderer::getPlane()
     return false;
 }
 
-bool drmRenderer::setMaster()
+bool drmRenderer::setMaster(int wait_max)
 {
     int wait_count = 0;
     do {
       if (!m_drmlib.drmSetMaster(m_fd)) return true;
       usleep(100);
       ++wait_count;
-    } while(wait_count < 30000);
+    } while(wait_count < wait_max);
     msdk_printf(MSDK_STRING("drmrender: error: failed to get drm mastership during 3 seconds - aborting\n"));
     return false;
 }
-- 
2.17.1

